BLAS_JLL_PATH := $(build_datarootdir)/julia/stdlib/$(VERSDIR)/BLAS_jll

$(BLAS_JLL_PATH):
	@mkdir -p "$@"

# We create a meta "BLAS_jll" package that just re-exports `OpenBLAS_jll` if we're using it,
# and just encodes the libblas and liblapack names otherwise:
$(BLAS_JLL_PATH)/src/BLAS_jll.jl: | $(BLAS_JLL_PATH)
	@mkdir -p "$(dir $@)"
	@echo "module BLAS_jll" > "$@"
	@echo "using Libdl" >> "$@"
ifeq ($(USE_BINARYBUILDER_OPENBLAS),1)
	@echo "using OpenBLAS_jll" >> "$@"
	@echo "const libblas = OpenBLAS_jll.libopenblas" >> "$@"
	@echo "const liblapack = OpenBLAS_jll.libopenblas" >> "$@"
else ifeq ($(USE_BINARYBUILDER_MKL),1)
	@echo "using MKL_jll" >> "$@"
ifeq ($(USE_BLAS64),1)
	@echo "const libblas = MKL_jll.libmkl_intel_ilp64" >> "$@"
	@echo "const liblapack = MKL_jll.libmkl_intel_ilp64" >> "$@"
else
	@echo "const libblas = MKL_jll.libmkl_intel_lp64" >> "$@"
	@echo "const liblapack = MKL_jll.libmkl_intel_lp64" >> "$@"
endif # USE_BLAS64
else
	@echo "const libblas = \"$(LIBBLASNAME)\"" >> "$@"
	@echo "const liblapack = \"$(LIBLAPACKNAME)\"" >> "$@"
endif # USE_BINARYBUILDER_*
	@echo "libblas_handle = C_NULL" >> "$@"
	@echo "liblapack_handle = C_NULL" >> "$@"
	@echo "libblas_path = \"\"" >> "$@"
	@echo "liblapack_path = \"\"" >> "$@"
	@echo "function __init__()" >> "$@"
	@echo "    global libblas, libblas_handle, libblas_path, liblapack, liblapack_handle, liblapack_path" >> "$@"
	@echo "    libblas_handle = dlopen(libblas)" >> "$@"
	@echo "    liblapack_handle = dlopen(liblapack)" >> "$@"
	@echo "    libblas_path = dlpath(libblas_handle)" >> "$@"
	@echo "    liblapack_path = dlpath(liblapack_handle)" >> "$@"
	@echo "end" >> "$@"
	@echo "end # module BLAS_jll" >> "$@"

$(BLAS_JLL_PATH)/Project.toml: | $(BLAS_JLL_PATH)
	@echo "name = \"BLAS_jll\"" > "$@"
	@echo "uuid = \"f1936524-4db9-4c7a-6f3e-6fc869057263\"" >> "$@"
	@echo "version = \"1.0.0\"" >> "$@"
	
	@echo "[deps]" >> "$@"
	@echo "Libdl = \"8f399da3-3557-5675-b5ff-fb832c97cbdb\"" >> "$@"

ifeq ($(USE_BINARYBUILDER_OPENBLAS),1)
	@echo "OpenBLAS_jll = \"4536629a-c528-5b80-bd46-f80d51c5b363\"" >> "$@"
endif

$(BLAS_JLL_PATH)/README.md: | $(BLAS_JLL_PATH)
	@echo "This is an autogenerated package to allow for easy switching of BLAS libraries in the Julia standard library." > "$@"
 
UNINSTALL_BLAS_jll := delete-uninstaller $(BLAS_JLL_PATH)
$(build_prefix)/manifest/BLAS_jll: $(BLAS_JLL_PATH)/src/BLAS_jll.jl $(BLAS_JLL_PATH)/Project.toml $(BLAS_JLL_PATH)/README.md
	@echo '$(UNINSTALL_BLAS_jll)' > "$@"

get-BLAS_jll:
configure-BLAS_jll:
install-BLAS_jll: $(build_prefix)/manifest/BLAS_jll
clean-BLAS_jll:
	rm -rf $(build_datarootdir)/julia/stdlib/$(VERSDIR)/BLAS_jll
	rm -f $(build_prefix)/manifest/BLAS_jll
distclean-BLAS_jll: clean-BLAS_jll

# Tack these one as targets for install-lapack and friends
install-lapack: install-BLAS_jll