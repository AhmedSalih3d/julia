# Define a set of targets for generating a fake JLL package.  This "fake JLL package" will
# load libraries off of the global library search path; it won't use artifacts.
#
# Parameters to this macro::
#   $1 = jll_name (e.g. OpenBLAS_jll)
#   $2 = list of library names in "varname1:filename1,varname:filename2,..." format.
#        Example: "libopenblas=libopenblas64_,liblapack=libopenblas64_"
#   $3 = jll_uuid (e.g. "f1936524-4db9-4c7a-6f3e-6fc869057263")
#   $4 = JLL dependencies in "name1=UUID1,name2=UUID2,..." format.
#        Example: "OpenBLAS_JLL=f1936524-4db9-4c7a-6f3e-6fc869057263".
#        Note that `Libdl=8f399da3-3557-5675-b5ff-fb832c97cbdb` is always implicitly added.

define jll-generate

$(1)_PATH := $(build_datarootdir)/julia/stdlib/$(VERSDIR)/$(1)

$($(1)_PATH):
	@mkdir -p "$$@"

$($(1)_PATH)/src/$(1).jl: | $($(1)_PATH)
	@mkdir -p "$(dir $$@)"
	@echo "module $(1)" > "$$@"
	@echo "using Libdl" >> "$$@"

	@for libpair in $(subst $(COMMA), ,$(2)); do \
		varname=$$$$(echo $$$${libpair} | cut -d'=' -f1); \
		fname=$$$$(echo $$$${libpair} | cut -d'=' -f2); \
		echo "const $$$${varname} = \"$$$${fname}\" >> "$$@"; \
		echo "$$$${varname}_handle = C_NULL" >> "$$@"; \
		echo "$$$${varname}_path = \"\"" >> "$$@"; \
		echo >> "$$@"; \
	done
	
	@echo "function __init__()" >> "$$@"
	@for libpair in $(subst , ,$(2)); do \
		varname=$$$$(echo $$$${libpair} | cut -d'=' -f1); \
		echo "global $$$${varname}" >> "$$@"; \
		echo "$$$${varname}_handle = dlopen($$$${varname})" >> "$$@"; \
		echo "$$$${varname}_path = dlpath($$$${varname})" >> "$$@"; \
	done
	@echo "end" >> "$$@"
	@echo "end # module $(1)" >> "$$@"

$($(1)_PATH)/Project.toml: | $($(1)_PATH)
	@echo "name = \"$(1)\"" > "$$@"
	@echo "uuid = \"$(3)\"" >> "$$@"
	@echo "version = \"1.0.0\"" >> "$$@"
	
	@echo "[deps]" >> "$$@"
	@echo "Libdl = \"8f399da3-3557-5675-b5ff-fb832c97cbdb\"" >> "$$@"
	@for deppair in $(subst $(COMMA), ,$(4)); do
		name=$$$$(echo $$$${deppair} | cut -d'=' -f1); \
		uuid=$$$$(echo $$$${deppair} | cut -d'=' -f2); \
		@echo "$$$${name} = \"$$$${uuid}\"" >> "$$@"; \
	done

$($(1)_PATH)/README.md: | $($(1)_PATH)
	@echo "This is an autogenerated package." > "$$@"
 
UNINSTALL_$(1) := delete-uninstaller $($(1)_PATH)
$(build_prefix)/manifest/$(1): $($(1)_PATH)/src/$(1).jl $($(1)_PATH)/Project.toml $($(1)_PATH)/README.md
	@echo '$(UNINSTALL_$(1))' > "$$@"

get-$(1):
configure-$(1):
install-$(1): $(build_prefix)/manifest/$(1)
clean-$(1):
	rm -rf $(build_datarootdir)/julia/stdlib/$(VERSDIR)/$(1)
	rm -f $(build_prefix)/manifest/$(1)
distclean-$(1): clean-$(1)
endef